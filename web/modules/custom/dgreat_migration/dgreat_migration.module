<?php

/**
 * @file
 * Contains dgreat_migration.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Fixes the user for creating groups on migration.
 */
function dgreat_migration_group_insert(EntityInterface $entity) {
  // This fixes the Migrate CSV issue of not having the right owner.
  $group = \Drupal::entityTypeManager()->getStorage('group')->load($entity->id());
  $group->set('uid', 1);
  $group->save($group);
}

/**
 * Implements hook_migrate_prepare_row().
 */
function dgreat_migration_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  // Do various tasks based on the migration id.
  switch ($migration->id()) {

    case 'upgrade_d7_node_type':
      // Content Types we are importing.
      $types = [
        'favorite_link'
      ];

      $type = $row->getSourceProperty('type');
      if (!in_array($type, $types)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }
      break;

    case 'upgrade_d7_field':

      // Field types we are skipping.
      $entities = [
        'command_button',
        'field_collection_item',
        'fieldable_panels_pane',
        'og_membership',
        'oa_wizard',
        'message',
        'paragraphs_item', // @todo why is this failing?
        'message_type'
      ];

      // Fields we are importing.
      $fields = [
        'field_url',
        'field_link_type',
        'field_category',
        'field_sso',
        'og_group_ref',
        'title',
      ];

      $entity = $row->getSourceProperty('instances')[0]['entity_type'];
      if (in_array($entity, $entities)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }

      $field = $row->getSourceProperty('field_name');
      if (!in_array($field, $fields)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }

      break;

    case 'upgrade_d7_field_instance':

      // Content Types we are importing.
      $bundles = [
        'favorite_link'
      ];

      $bundle = $row->getSourceProperty('bundle');
      if (!in_array($bundle, $bundles)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }

      break;

    case 'upgrade_d7_view_modes':
      // Skip these field types.
      $types = [
        'command_button',
        'field_collection_item',
        'fieldable_panels_pane',
        'message',
        'message_type',
        'og_membership',
        'oa_wizard',
        'paragraphs_item',
      ];

      $type = $row->getSourceProperty('entity_type');
      if (in_array($type, $types)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }

      break;

    case 'upgrade_d7_field_formatter_settings':
    case 'upgrade_d7_field_instance_widget_settings':

      // Content Types we are importing.
      $bundles = [
        'favorite_link'
      ];

      // Fields to skip.
      $field_skip= [
        'og_group_ref'
      ];

      $bundle = $row->getSourceProperty('bundle');
      if ($bundle !== NULL && !in_array($bundle, $bundles)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }

      // @todo field_redirection still fails...
      $field = $row->getSourceProperty('field_name');
      if (in_array($field, $field_skip)) {
        // This makes it so we don't need to reprocess the row.
        throw new MigrateSkipRowException('', TRUE);
      }


      break;



  }
}