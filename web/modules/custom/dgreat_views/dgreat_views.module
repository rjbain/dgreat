<?php

/**
 * @file
 * Contains dgreat_views.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\views\ResultRow;

/**
 * Implements hook_help().
 */
function dgreat_views_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dgreat_views module.
    case 'help.page.dgreat_views':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code related to the views on the site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dgreat_views_views_pre_render(ViewExecutable $view) {
  $name = $view->id();
  $display = $view->current_display;

  // Removes the duplicates from the Group Content View.
  switch ($name) {
    case 'favorite_links':
    case 'favorite_links_quick_menu':
    case 'quick_links':
    case 'quick_links_block':
      // Initialize our vars.
      $defaults = $view_results = $unique_nids = $new_results = [];
      $query = '';

      // Now remove the duplicates from all the displays.
      foreach ($view->result as $index => $result) {
        // Grab the nid from the related node.
        $node = $result->_relationship_entities['gc__node'];
        $nid = $node->id();

        // If it isn;t in there, add it and the result.
        if (!in_array($nid, $unique_nids)) {
          $unique_nids[] = $nid;
          $new_results[] = $result;
        }
      }

      $view->result = $new_results;

      // Adds in the default links for my_links displays.
      if ($display == 'my_links') {
        // Initialize our vars.
        $gids = $nids = $nodes = [];

        // Grab the existing results to store later.
        // So we can put that after the defaults.
        foreach ($view->result as $index => $result) {
          $view_results[] = $result;
        }


        // Grab the current users groups.
        $user = User::load(\Drupal::currentUser()->id());
        $groups = $user->get('field_user_group')->getValue();
        foreach ($groups as $gid) {
          $gids[] = $gid['target_id'];
        }

        if (empty($gids)) {
          return;
        }

        // Remove duplicates.
        $gids = array_unique($gids);

        // Initialize the db.
        $db = \Drupal::database();

        // Grab all the default entity ids of the group.
        if ($name == 'favorite_links') {
          $query = $db
            ->select('group__field_default_favorite_links', 'g')
            ->fields('g', ['field_default_favorite_links_target_id'])
            ->condition('entity_id', $gids, 'IN');
        }

        if ($name == 'quick_links') {
          $query = $db
            ->select('group__field_default_quick_links', 'g')
            ->fields('g', ['field_default_quick_links_target_id'])
            ->condition('entity_id', $gids, 'IN');
        }

        // Loop through and grab our content ids.
        foreach ($query->execute()->fetchAll() as $result) {
          if ($name == 'favorite_links') {
            $nids[] = $result->field_default_favorite_links_target_id;
          }
          if ($name == 'quick_links') {
            $nids[] = $result->field_default_quick_links_target_id;
          }
        }

        if (empty($nids)) {
          return;
        }

        // Remove duplicates.
        $nids = array_unique($nids);

        // Load each node to use as the default.
        foreach ($nids as $nid) {
          $nodes[] = Node::load($nid);
        }

        foreach ($nodes as $node) {

          $defaults[] = new ResultRow([
            '_relationship_entities' => [
              'gc__node' => $node,
            ],
            'node_field_data_group_content_field_data_nid' => $node->nid,
            'groups_field_data_group_content_field_data_id' => NULL,
            'flagging_node_field_data_id' => NULL,
          ]);
        }

        // Merge the results.
        $merge = array_merge_recursive($defaults, $view_results);
        $view->result = $merge;
      }



      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function dgreat_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $name = $view->id();
  $display = $view->current_display;

  switch ($name) {
    case 'favorite_links':
    case 'quick_links':

      // Removes fields and header for non admins.
      if ($display == 'all_apps') {
        $user_roles = \Drupal::currentUser()->getRoles();
        if (!in_array('administrator', $user_roles)) {
          $view->removeHandler($display, 'field', 'edit_node');
          $view->removeHandler($display, 'field', 'delete_node');
          $view->removeHandler($display, 'header', 'area');
        }
      }
      break;
  }
}
