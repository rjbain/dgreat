<?php

/**
 * @file
 * Contains dgreat_views.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_help().
 */
function dgreat_views_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dgreat_views module.
    case 'help.page.dgreat_views':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code related to the views on the site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dgreat_views_views_pre_render(ViewExecutable $view) {
  $name = $view->id();
  $display = $view->current_display;

  // Removes the duplicates from the Group Content View.
  switch ($name) {
    case 'favorite_links':
    case 'favorite_links_quick_menu':
    case 'quick_links':
    case 'quick_links_block':
      $unique_nids = $new_results = [];
      foreach ($view->result as $index => $result) {
        // Grab the nid from the related node.
        $node = $result->_relationship_entities["gc__node"];
        $nid = $node->id();

        // If it isn;t in there, add it and the result.
        if (!in_array($nid, $unique_nids)) {
          $unique_nids[] = $nid;
          $new_results[] = $result;
        }
      }

      // Set our unique set of results based of of nid.
      $view->result = $new_results;

      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function dgreat_views_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $name = $view->id();
  $display = $view->current_display;

  switch ($name) {
    case 'favorite_links':
    case 'quick_links':

      // Removes fields and header for non admins.
      if ($display == 'all_apps') {
        $user_roles = \Drupal::currentUser()->getRoles();
        if (!in_array('administrator', $user_roles)) {
          $view->removeHandler($display, 'field', 'edit_node');
          $view->removeHandler($display, 'field', 'delete_node');
          $view->removeHandler($display, 'header', 'area');
        }
      }
      break;
  }
}

/**
 * Prepares variables for views table templates.
 *
 * Default template: views-view-table.html.twig.
 */
function dgreat_views_preprocess_views_view_table(&$vars) {
  $view = $vars['view']->id();
  $display = $vars['view']->current_display;

  switch ($view) {
    case 'favorite_links':
    case 'quick_links':

      // This adds the default links to the top of the view.
      // Tried to do this in the view, but it just wouldn't work well.
      if ($display == 'my_links') {
        $gids = $nids = $nodes = [];

        // Grab the current users groups.
        $user = User::load(\Drupal::currentUser()->id());
        $groups = $user->get('field_user_group')->getValue();
        foreach ($groups as $gid) {
          $gids[] = $gid['target_id'];
        }

        if (empty($gids)) {
          return;
        }

        $db = \Drupal::database();

        // Grab all the default entity ids of the group.
        $query = $db
          ->select('group__field_default_favorite_links', 'g')
          ->fields('g', ['field_default_favorite_links_target_id'])
          ->condition('entity_id', $gids, 'IN');

        $results = $query->execute()->fetchAll();

        foreach ($results as $result) {
          $nids[] = $result->field_default_favorite_links_target_id;
        }

        if (empty($nids)) {
          return;
        }

        foreach ($nids as $nid) {
          $nodes[] = Node::load($nid);
        }

        // Set and reset other rows so we can add defaults to top.
        $rows = $vars['rows'];
        $vars['rows'] = [];

        // Create the rows of default items.
        foreach ($nodes as $node) {
          $markup = $node->toLink()->toString();

          $vars['rows'][] = [
            'columns' => [
              'link_flag' => NULL,
              'label' => [
                'default_classes' => TRUE,
                'content' => [
                  0 => [
                    'field_output' => [
                      '#markup' => $markup,
                    ]
                  ]
                ]
              ]
            ]
          ];
        }

        // Add back in old rows but renumbered.
        $count = count($vars['rows']);
        foreach ($rows as $row) {
          $vars['rows'][$count] = $row;
          $count++;
        }
      }

      break;
  }
}