<?php

/**
 * @file
 * Token module integration.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_token_info_alter().
 */
function cas_attributes_token_info_alter(&$data) {
  $data['tokens']['cas']['attribute'] = array(
    'name' => t('Attribute'),
    'description' => t('A CAS attribute of the user. (Only available if user is logged into CAS). Always stored as an array token (thus supporting multivalue attributes); therefore be sure to remember to specify which array member you want (for instance, to get the first value: [cas:attribute:?:first]).'),
    'dynamic' => TRUE,
  );
}

/**
 * Implements hook_tokens().
 */
function cas_attributes_tokens($type, $tokens, array $data = array(), array $options = array(), BubbleableMetadata $bubbleable_metadata) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  $token_service = \Drupal::token();

  if ($type == 'cas') {
    // Provide [cas:attribute:?] dynamic tokens.
    if ($attribute_tokens = $token_service->findWithPrefix($tokens, 'attribute')) {
      $attribute = @unserialize(\Drupal::request()->getSession()->get('cas_attributes_properties'))->getAttributes();
      $attribute = array_change_key_case($attribute, CASE_LOWER);
      foreach ($attribute_tokens as $name => $original) {
        // If there are no options specified have it return all values.
        if (strpos($name, ':') === FALSE) {
          $name .= ':join';
        }

        // Break out the token into attributes and the options for them.
        list($name, $token) = explode(':', $name, 2);

        $name = Unicode::strtolower($name);
        if (isset($attribute[$name])) {
          $value = $attribute[$name];
          if (!is_array($value)) {
            $value = array($value);
          }
          $replacements += $token_service->generate('array', array($token => $original), array('array' => $value), $options, $bubbleable_metadata);
        }
        elseif ($name == '?') {
          $keys = array_keys($attribute);
          if ($sanitize) {
            $keys = array_map(array('SafeMarkup', 'checkPlain'), $keys);
          }
          $replacements[$original] = t('Available attributes: %keys', array('%keys' => implode(', ', $keys)));
        }
      }
    }
  }
  return $replacements;
}

