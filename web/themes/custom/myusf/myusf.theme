<?php

use \Drupal\block_content\BlockContentInterface;
use \Drupal\paragraphs\Entity\Paragraph;

/**
 * @file
 */

/**
 *
 */
function myusf_preprocess(&$variables) {
  isset($_GET["search_content"]) ? $search_content = $_GET["search_content"] : $search_content = "";
  isset($_GET["event_category"]) ? $event_category = $_GET["event_category"] : $event_category = "";
  isset($_GET["event_date"]) ? $event_date = $_GET["event_date"] : $event_date = "";
  isset($_GET["event_target"]) ? $event_target = $_GET["event_target"] : $event_target = "";
  isset($_GET["action"]) ? $action = $_GET["action"] : $action = "";
  isset($_GET["usfca_search"]) ? $usfca_search = $_GET["usfca_search"] : $usfca_search = "";
  isset($_GET["myusf_search"]) ? $myusf_search = $_GET["myusf_search"] : $myusf_search = "";

  $variables['search_content'] = htmlentities($search_content, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_category'] = htmlentities($event_category, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_date'] = htmlentities($event_date, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_target'] = htmlentities($event_target, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['action'] = htmlentities($action, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['usfca_search'] = htmlentities($usfca_search, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['myusf_search'] = htmlentities($myusf_search, ENT_QUOTES | ENT_HTML5, 'UTF-8');
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function myusf_preprocess_block(&$vars) {
  if ($vars['derivative_plugin_id'] == 'search_results') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'event_search') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'user_block') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'user_block_dashboard') {
    $vars['#cache']['max-age'] = 0;
  }

  // Allow blocks to update after editing.
  if ($vars['base_plugin_id'] == 'block_content') {
    $renderer = \Drupal::service('renderer');
    $renderer->addCacheableDependency($vars, $vars['content']['#block_content']);
  }

    // Get email address fields in contact boxes and add markup to them so they will wrap lines when they're too long.
    $content = $vars['elements']['content'];
    if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
        $blockType = $content['#block_content']->bundle();

        if ($blockType === 'contact') {
            $addys = $content['#block_content']->get('field_email_address');
            if (!empty($addys[0]->value)) {
                $vars['altered_email_address1'] = html_entity_decode(str_replace("@", "<wbr>@", $addys[0]->value));
            }
            if (!empty($addys[1]->value)) {
                $vars['altered_email_address2'] = html_entity_decode(str_replace("@", "<wbr>@", $addys[1]->value));
            }
        }

    }
}


function myusf_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
    $suggestions[] = 'block__type__' . $content['#block_content']->bundle();
  }
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function myusf_theme_suggestions_page_alter(&$suggestions, $variables, $hook) {
  /**
     * 404 template suggestion.
     */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    switch ($status_code) {
      case 404:{
        $suggestions[] = 'page__' . (string) $status_code;
        break;
}
      default:
        break;
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */

function myusf_preprocess_paragraph__video(&$variables) {
    $original_video_url = $variables['paragraph']->field_video_url[0]->uri;

    // Is it a youtube link?
    if (strpos($original_video_url, 'youtu') !== false) {
        // Get the video ID number
        $youtube_preg = preg_match("/^(?:http(?:s)?:\/\/)?(?:www\.)?(?:m\.)?(?:youtu\.be\/|youtube\.com\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/))([^\?&\"'>]+)/", $original_video_url, $matches);
        if ($youtube_preg > 0) {
            $youtube_id = $matches[1];
            $variables['new_vid_url'] = 'https://www.youtube.com/embed/' . $youtube_id;
        }

    } else if (strpos($original_video_url, 'vimeo') !== false) {
        $vimeo_preg = preg_match('/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/', $original_video_url, $matches);
        if ($vimeo_preg > 0) {
            $vimeo_id = $matches[5];
            $variables['new_vid_url'] = 'https://player.vimeo.com/video/' . $vimeo_id;
        }
    }
}


function myusf_preprocess_node(&$variables)
{
    // Check for a video on the page.
    // Need this for knowing when to print out the modal overlay markup.
    $node = $variables['node'];
    $paragraph_video_exists = FALSE;
    if ($node->hasField('field_migrate_final')) {
        // Get the referenced entities for the "body" field, aka field_migrate_final.
        $paragraphs = $node->field_migrate_final->referencedEntities();
        // Search through entities and nested entities for the video url field.
        foreach ($paragraphs as $paragraph) {
            if (isset($paragraph->field_video_url[0]->uri)) {
                $paragraph_video_exists = true;
            }
            foreach ($paragraph->referencedEntities() as $nested) {
                if (isset($nested->field_video_url[0]->uri)) {
                    $paragraph_video_exists = true;
                }
                foreach ($nested->referencedEntities() as $buried) {
                    if (isset($buried->field_video_url[0]->uri)) {
                        $paragraph_video_exists = true;
                    }
                    foreach ($buried->referencedEntities() as $carbonite) {
                        if (isset($carbonite->field_video_url[0]->uri)) {
                            $paragraph_video_exists = true;
                        }
                    }
                }
            }
        }
    }
    $variables['paragraph_video_exists'] = $paragraph_video_exists;


  // Allowed view modes
  // For checking the hero image region and allowing access to it from the node template so that titles can be handled accordingly
  $view_mode = $variables['view_mode']; // Retrieve view mode
  $allowed_view_modes = ['full']; // Array of allowed view modes (for performance so as to not execute on unneeded nodes)
  // If view mode is in allowed view modes list, pass to myusf_add_regions_to_node()
  if(in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded region)
    $allowed_regions = ['hero_image'];
    myusf_add_regions_to_node($allowed_regions, $variables);
  }

}

/**
* myusf_add_regions_to_node
*/
 
function myusf_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme
  $theme = \Drupal::theme()->getActiveTheme()->getName();
 
  // Retrieve theme regions
  $available_regions = system_region_list($theme, 'REGIONS_ALL');
 
  // Validate allowed regions with available regions
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);
 
  // For each region
  foreach ($regions as $key => $region) {
 
    // Load region blocks
    $blocks = \Drupal::entityTypeManager()->getStorage('block')->loadByProperties(array('theme' => $theme, 'region' => $region));
 
    // Sort â€˜em
    uasort($blocks, 'Drupal\block\Entity\Block::sort');
 
    // Capture viewable blocks and their settings to $build
    $build = array();
    $builder = \Drupal::entityTypeManager()->getViewBuilder('block');
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $build[$key] = $builder->view($block, 'block');
      }
    }
    // Add build to region
    $variables[$region] = $build;
  }
}


/**
 * Implements hook_page_attachments_alter().
 */
function myusf_page_attachments_alter(array &$attachments, $variables) {

    $node = \Drupal::request()->get('node');
    $type = "";

    if (isset($node) && $node instanceof \Drupal\node\NodeInterface) {
        $type = $node->getType();
    }

    // We want to prevent the search engines from indexing favorite_link content.
    if ($type == 'favorite_link') {
        // add the metatag
        $newtag = [
            '#tag' => 'meta',
            '#attributes' => [
                'name' => 'robots',
                'content' => 'noindex, nofollow',
            ],
        ];
        $attachments['#attached']['html_head'][] = [$newtag, 'robots'];
    }
}