<?php
/**
 * @file
 */

/**
 *
 */
function myusf_preprocess(&$variables) {
  isset($_GET["search_content"]) ? $search_content = $_GET["search_content"] : $search_content = "";
  isset($_GET["event_category"]) ? $event_category = $_GET["event_category"] : $event_category = "";
  isset($_GET["event_date"]) ? $event_date = $_GET["event_date"] : $event_date = "";
  isset($_GET["event_target"]) ? $event_target = $_GET["event_target"] : $event_target = "";
  isset($_GET["action"]) ? $action = $_GET["action"] : $action = "";
  isset($_GET["usfca_search"]) ? $usfca_search = $_GET["usfca_search"] : $usfca_search = "";
  isset($_GET["myusf_search"]) ? $myusf_search = $_GET["myusf_search"] : $myusf_search = "";

  $variables['search_content'] = htmlentities($search_content, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_category'] = htmlentities($event_category, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_date'] = htmlentities($event_date, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['event_target'] = htmlentities($event_target, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['action'] = htmlentities($action, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['usfca_search'] = htmlentities($usfca_search, ENT_QUOTES | ENT_HTML5, 'UTF-8');
  $variables['myusf_search'] = htmlentities($myusf_search, ENT_QUOTES | ENT_HTML5, 'UTF-8');
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function myusf_preprocess_block(&$vars) {
  if ($vars['derivative_plugin_id'] == 'search_results') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'event_search') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'user_block') {
    $vars['#cache']['max-age'] = 0;
  }

  if ($vars['derivative_plugin_id'] == 'user_block_dashboard') {
    $vars['#cache']['max-age'] = 0;
  }

  // Allow blocks to update after editing.
  if ($vars['base_plugin_id'] == 'block_content') {
    $renderer = \Drupal::service('renderer');
    $renderer->addCacheableDependency($vars, $vars['content']['#block_content']);
  }
}


function myusf_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
    $suggestions[] = 'block__type__' . $content['#block_content']->bundle();
  }
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function myusf_theme_suggestions_page_alter(&$suggestions, $variables, $hook) {
  /**
     * 404 template suggestion.
     */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    switch ($status_code) {
      case 404:{
        $suggestions[] = 'page__' . (string) $status_code;
        break;
}
      default:
        break;
    }
  }
}



/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */

function myusf_preprocess_paragraph__video(&$variables) {
    $original_video_url = $variables['paragraph']->field_video_url[0]->uri;

    // Is it a youtube link?
    if (strpos($original_video_url, 'youtu') !== false) {
        // Get the video ID number
        $youtube_preg = preg_match("/^(?:http(?:s)?:\/\/)?(?:www\.)?(?:m\.)?(?:youtu\.be\/|youtube\.com\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/))([^\?&\"'>]+)/", $original_video_url, $matches);
        if ($youtube_preg > 0) {
            $youtube_id = $matches[1];
            $variables['new_vid_url'] = 'https://www.youtube.com/embed/' . $youtube_id;
        }

    } else if (strpos($original_video_url, 'vimeo') !== false) {
        $vimeo_preg = preg_match('/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/', $original_video_url, $matches);
        if ($vimeo_preg > 0) {
            $vimeo_id = $matches[5];
            $variables['new_vid_url'] = 'https://player.vimeo.com/video/' . $vimeo_id;
        }
    }
}


function myusf_preprocess_node(&$variables)
{
    // Check for a video on the page.
    // Need this for knowing when to print out the modal overlay markup.
    $node = $variables['node'];
    $paragraph_video_exists = FALSE;
    $entities = $node->referencedEntities();
    foreach ($entities as $entity) {
        if (!empty($entity->field_video_url)) {
            $paragraph_video_exists = TRUE;
        }
    }
    $variables['paragraph_video_exists'] = $paragraph_video_exists;
}